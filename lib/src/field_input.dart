import 'package:flutter/material.dart';
import 'package:flutter_db_input_widget/model/db_record.dart';

/// This class holds the information about a given input row, it can be the initial value provided
/// for TabletInputLine columns, or the data generated by TabletInputLine and sent back via a stream.
class FieldInput {
  static const _DataTypes = {'a', 'b', 'c', 'd', 'i', 'r', 's'};
  static bool isDataTypes(String type) => _DataTypes.contains(type);
  static bool isComplex(String type) => (type == 'a' || type == 'c');

  List<String> _items;
  final List<String> fields;
  bool tabbedOut = false;
  String get field => _items[0];
  String get json => _items[1];
  String get type => _items[2];
  String get target => (type == 'a' || type == 'c') ? _items[3] : '';
  String get comment => _items[4];

  FieldInput({this.fields = const ['Field', 'Json', 'a,b,c,d,i,r,s', 'Table', 'Comment']})
      : assert(fields != null && fields.length > 0) {
    _items = List.filled(fields.length, '');
  }

  factory FieldInput.fromDB({@required DBRecord record}) {
    final result = FieldInput();
    result.setIndex(0, string: record.field);
    result.setIndex(1, string: record.json);
    result.setIndex(2, string: record.type);
    result.setIndex(3, string: record.target);
    result.setIndex(4, string: record.comment);
    return result;
  }

  void mock({bool complex = false}) {
    _items = List();
    _items.add('field');
    _items.add('json');
    _items.add(complex == true ? 'c' : 'i');
    _items.add('table');
    _items.add('comment');
  }

  String setIndex(int index, {@required String string}) {
    assert(index != null && index >= 0 && index < _items.length, '$index is invalid for size ${_items.length}');
    assert(string != null);
    while (string.isNotEmpty && string.runes.toList().last == 9) {
      string = string.substring(0, string.length - 1);
    }
    _items[index] = string;
    return _items[index];
  }

  String validate() {
    if (field.isEmpty) return 'Empty Field';
    if (json.isEmpty) return 'Empty Json';
    if (!isDataTypes(type)) return 'Invalid Type';
    if (isComplex(type) && target?.isEmpty == true) return 'Missing table for type $type';
    if (!isComplex(type) && target?.isEmpty != true) return 'Table provided for type $type';
    return null;
  }

  String toString() => 'field:$field json:$json type:$type target:$target comment:"$comment"';
}
